[device "pump"]
vendor = openaps.vendors.medtronic
extra = ini/secret.ini

[alias]
preflight = ! bash -c "rm -f monitor/clock.json && openaps report invoke monitor/clock.json 2>/dev/null && grep -q T monitor/clock.json && echo PREFLIGHT OK || ( mm-stick warmup || echo PREFLIGHT FAIL; exit 1 )"
history = report invoke monitor/model.json monitor/clock-zoned.json monitor/pump-history.json monitor/pump-history-zoned.json
gather = report invoke monitor/active-basal-profile.json monitor/reservoir.json monitor/settings.json monitor/status.json monitor/battery.json monitor/bg-targets.json monitor/insulin-sensitivities.json monitor/carb-ratios.json monitor/temp-basal-status.json monitor/latest-treatments.json predict/profile.json
latest-ns-treatment-time = ! bash -c "openaps use latest-treatments shell | json created_at"
format-latest-nightscout-treatments = ! bash -c "nightscout cull-latest-openaps-treatments monitor/pump-history-zoned.json monitor/model.json $(openaps latest-ns-treatment-time) > monitor/upload-treatments.json"
enact = ! bash -c "rm -vf predict/oref0.json; openaps report invoke predict/iob.json predict/oref0.json && cat predict/oref0.json && grep -q duration predict/oref0.json && ( openaps report invoke control/enacted.json && cat control/enacted.json ) || echo No action required"
upload-other = ! bash -c "openaps format-latest-nightscout-treatments && test $(json -f monitor/upload-treatments.json -a created_at eventType | wc -l ) -gt 0 && (openaps use ns-upload shell treatments.json monitor/upload-treatments.json ) || echo \"No recent treatments to upload\""
upload = ! bash -c "openaps format-latest-nightscout-treatments && test $(json -f upload/latest-treatments.json -a created_at eventType | wc -l ) -gt 0 && (ns-upload $NIGHTSCOUT_HOST $API_SECRET treatments.json upload/latest-treatments.json ) || echo \"No recent treatments to upload\""
wait-for-bg = ! bash -c "cp monitor/glucose.json monitor/last-glucose.json; while(diff -q monitor/last-glucose.json monitor/glucose.json); do echo -n .; sleep 10; openaps report invoke monitor/glucose.json; done"
wait-loop = ! bash -c "openaps preflight && openaps history && openaps upload && openaps gather && openaps wait-for-bg && openaps enact"
loop = ! bash -c "openaps preflight && openaps history && openaps upload && openaps gather && openaps report invoke monitor/glucose.json && openaps enact"
retry-loop = ! bash -c "openaps wait-loop || until( ! mm-stick warmup || ! openaps preflight || openaps loop); do sleep 10; done; openaps preflight"

[vendor "openapscontrib.mmhistorytools"]
path = .
module = openapscontrib.mmhistorytools

[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[device "munge"]
vendor = openapscontrib.mmhistorytools

[device "tz"]
vendor = openapscontrib.timezones

[device "determine-basal"]
fields = iob current-temps glucose profile
cmd = oref0-determine-basal
vendor = openaps.vendors.process
args = 

[device "calculate-iob"]
fields = history profile clock
cmd = oref0-calculate-iob
vendor = openaps.vendors.process
args = 

[device "latest-treatments"]
vendor = openaps.vendors.process
extra = ini/latest-treatments.ini

[device "ns-bgnow"]
vendor = openaps.vendors.process
extra = ini/ns-bgnow.ini

[device "get-profile"]
fields = settings bg-targets isf basals max-iob
cmd = oref0-get-profile
vendor = openaps.vendors.process
args = 

[report "monitor/model.json"]
device = pump
use = model
reporter = JSON

[report "monitor/ns-glucose.json"]
device = ns-bgnow
use = shell
reporter = JSON

[report "monitor/pump-history.json"]
device = pump
count = 120
use = iter_pump
reporter = JSON

[report "monitor/pump-history-zoned.json"]
use = rezone
reporter = JSON
date = timestamp dateString start_at end_at created_at
adjust = missing
input = monitor/pump-history.json
device = tz
timezone = None
astimezone = True

[report "monitor/clock.json"]
device = pump
use = read_clock
reporter = JSON

[report "monitor/clock-zoned.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
input = monitor/clock.json
device = tz
t